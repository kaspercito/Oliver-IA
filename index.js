const fs = require('fs');
const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const axios = require('axios');
require('dotenv').config();

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.DirectMessageReactions,
        GatewayIntentBits.MessageContent,
    ],
});

// IDs y constantes
const OWNER_ID = '752987736759205960';
const ALLOWED_USER_ID = '1023132788632862761'; // ID de Bel√©n
const CHANNEL_ID = '1343749554905940058';
const MAX_MESSAGES = 20;

const BOT_UPDATES = [
    '¬°Arregl√© el error sentMessage y ahora puedo mostrar varias im√°genes en responder y !ayuda, Todo listo para que funcione perfecto mientras estoy en el quinto sue√±o.',
    'Espero ahora si este todo bien hecho, he mejorado las respuestas en las que el bot te responder√°, espero te pueda servir, estoy pensando en mas mejoras.'
];

const PREVIOUS_BOT_UPDATES = [
    '¬°Arregl√© el error sentMessage y ahora puedo mostrar varias im√°genes en responder y !ayuda, Todo listo para que funcione perfecto mientras estoy en el quinto sue√±o.',
    'Espero ahora si este todo bien hecho, he mejorado las respuestas en las que el bot te responder√°, espero te pueda servir, estoy pensando en mas mejoras.'
];

// Preguntas predefinidas con 4 opciones (incluye tu lista completa aqu√≠)
const preguntasTrivia = [/* Tu lista de preguntasTrivia */];

// Estado
const activeTrivia = new Map();
const sentMessages = new Map();
let dataStore = { conversationHistory: {}, triviaRanking: {} };

// Utilidades
const createEmbed = (color, title, description, footer = 'Con cari√±o, Miguel IA') => {
    return new EmbedBuilder()
        .setColor(color)
        .setTitle(title)
        .setDescription(description)
        .setFooter({ text: footer })
        .setTimestamp();
};

const sendError = async (channel, message, suggestion = '¬øIntentamos de nuevo?') => {
    const embed = createEmbed('#FF5555', '¬°Ups!', `${message}\n${suggestion}`);
    await channel.send({ embeds: [embed] });
};

const sendSuccess = async (channel, title, message) => {
    const embed = createEmbed('#55FF55', title, message);
    await channel.send({ embeds: [embed] });
};

// Funciones de persistencia en GitHub
async function loadDataStore() {
    try {
        const response = await axios.get(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/contents/${process.env.GITHUB_FILE_PATH}`,
            { headers: { 'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`, 'Accept': 'application/vnd.github+json' } }
        );
        const content = Buffer.from(response.data.content, 'base64').toString('utf8');
        return content ? JSON.parse(content) : { conversationHistory: {}, triviaRanking: {} };
    } catch (error) {
        console.error('Error al cargar datos desde GitHub:', error.message);
        return { conversationHistory: {}, triviaRanking: {} };
    }
}

async function saveDataStore(data) {
    try {
        let sha;
        try {
            const response = await axios.get(
                `https://api.github.com/repos/${process.env.GITHUB_REPO}/contents/${process.env.GITHUB_FILE_PATH}`,
                { headers: { 'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`, 'Accept': 'application/vnd.github+json' } }
            );
            sha = response.data.sha;
        } catch (error) {
            if (error.response && error.response.status === 404) {
                console.log('Archivo no encontrado en GitHub, creando uno nuevo.');
                await axios.put(
                    `https://api.github.com/repos/${process.env.GITHUB_REPO}/contents/${process.env.GITHUB_FILE_PATH}`,
                    {
                        message: 'Crear archivo inicial para historial y ranking',
                        content: Buffer.from(JSON.stringify({ conversationHistory: {}, triviaRanking: {} }, null, 2)).toString('base64'),
                    },
                    { headers: { 'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`, 'Accept': 'application/vnd.github+json' } }
                );
                console.log('Archivo creado en GitHub');
                return;
            } else {
                throw error;
            }
        }

        await axios.put(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/contents/${process.env.GITHUB_FILE_PATH}`,
            {
                message: 'Actualizar historial y ranking',
                content: Buffer.from(JSON.stringify(data, null, 2)).toString('base64'),
                sha: sha,
            },
            { headers: { 'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`, 'Accept': 'application/vnd.github+json' } }
        );
        console.log('Datos guardados en GitHub');
    } catch (error) {
        console.error('Error al guardar datos en GitHub:', error.message);
    }
}

// Funciones de trivia y ranking
function obtenerPreguntaTrivia() {
    if (preguntasTrivia.length === 0) {
        console.error('No hay preguntas de trivia definidas.');
        return null;
    }
    const randomIndex = Math.floor(Math.random() * preguntasTrivia.length);
    const trivia = preguntasTrivia[randomIndex];
    const opciones = [...trivia.incorrectas, trivia.respuesta].sort(() => Math.random() - 0.5);
    return { pregunta: trivia.pregunta, opciones, respuesta: trivia.respuesta };
}

async function manejarTrivia(message) {
    const trivia = obtenerPreguntaTrivia();
    if (!trivia) {
        return sendError(message.channel, 'No hay preguntas de trivia disponibles.');
    }
    const embedPregunta = createEmbed('#55FFFF', 'üé≤ ¬°Pregunta de Trivia!',
        `${trivia.pregunta}\n\n${trivia.opciones.map((op, i) => `**${String.fromCharCode(65 + i)})** ${op}`).join('\n')}`,
        'Tienes 15 segundos para responder con A, B, C o D'
    );
    const sentMessage = await message.channel.send({ embeds: [embedPregunta] });
    activeTrivia.set(message.channel.id, { id: sentMessage.id, correcta: trivia.respuesta, opciones: trivia.opciones });

    const opcionesValidas = ["a", "b", "c", "d"];
    const indiceCorrecto = trivia.opciones.indexOf(trivia.respuesta);
    const letraCorrecta = opcionesValidas[indiceCorrecto];

    try {
        const respuestas = await message.channel.awaitMessages({
            filter: (res) => res.author.id === message.author.id && opcionesValidas.includes(res.content.toLowerCase()),
            max: 1,
            time: 15000,
            errors: ['time']
        });
        const respuestaUsuario = respuestas.first().content.toLowerCase();
        activeTrivia.delete(message.channel.id);

        if (respuestaUsuario === letraCorrecta) {
            updateRanking(message.author.id, message.author.username);
            sendSuccess(message.channel, 'üéâ ¬°Correcto!',
                `¬°Bien hecho, ${message.author.tag}! La respuesta correcta era **${trivia.respuesta}**. ¬°Ganaste 1 punto! Usa !trivia para otra ronda o !ranking para ver los mejores.`);
        } else {
            sendError(message.channel, '‚ùå ¬°Casi!',
                `Lo siento, ${message.author.tag}, la respuesta correcta era **${trivia.respuesta}** (Opci√≥n ${letraCorrecta.toUpperCase()}). ¬°Intenta otra vez con !trivia!`);
        }
    } catch (error) {
        activeTrivia.delete(message.channel.id);
        sendError(message.channel, '‚è≥ ¬°Tiempo agotado!',
            `Se acab√≥ el tiempo. La respuesta correcta era **${trivia.respuesta}** (Opci√≥n ${letraCorrecta.toUpperCase()}). ¬øOtra ronda? Usa !trivia`);
    }
}

function updateRanking(userId, username) {
    if (!dataStore.triviaRanking[userId]) {
        dataStore.triviaRanking[userId] = { username, score: 0 };
    }
    dataStore.triviaRanking[userId].score += 1;
    saveDataStore(dataStore);
}

function getRankingEmbed() {
    const sortedRanking = Object.entries(dataStore.triviaRanking)
        .sort(([, a], [, b]) => b.score - a.score)
        .slice(0, 5);
    const description = sortedRanking.length > 0
        ? sortedRanking.map(([id, { username, score }], i) => `${i + 1}. **${username}**: ${score} puntos`).join('\n')
        : '¬°A√∫n no hay puntajes! Juega con !trivia para empezar.';
    return createEmbed('#FFD700', 'üèÜ Ranking de Trivia', description);
}

// Evento ready
client.once('ready', async () => {
    console.log('¬°Miguel IA est√° listo para ayudar!');
    client.user.setPresence({ activities: [{ name: "Listo para ayudarte, Bel√©n", type: 0 }], status: 'online' });

    dataStore = await loadDataStore();

    try {
        const channel = await client.channels.fetch(CHANNEL_ID);
        if (!channel) throw new Error('Canal no encontrado');

        const userHistory = dataStore.conversationHistory[ALLOWED_USER_ID] || [];
        const historySummary = userHistory.length > 0
            ? userHistory.slice(-3).map(msg => `${msg.role === 'user' ? 'Bel√©n' : 'Yo'}: ${msg.content}`).join('\n')
            : 'No hay historial reciente, Bel√©n.';

        const argentinaTime = new Date().toLocaleTimeString('es-AR', { timeZone: 'America/Argentina/Buenos_Aires' });
        const updatesChanged = JSON.stringify(BOT_UPDATES) !== JSON.stringify(PREVIOUS_BOT_UPDATES);

        if (updatesChanged) {
            const updateEmbed = createEmbed('#FFD700', 'üì¢ Actualizaciones de Miguel IA',
                '¬°Tengo mejoras nuevas para compartir, Bel√©n!')
                .addFields(
                    { name: 'Novedades', value: BOT_UPDATES.map(update => `- ${update}`).join('\n'), inline: false },
                    { name: 'Hora de actualizaci√≥n', value: `${argentinaTime}`, inline: false },
                    { name: '√öltimas conversaciones', value: historySummary, inline: false }
                );
            await channel.send({ embeds: [updateEmbed] });
            console.log('Actualizaciones enviadas al canal:', CHANNEL_ID);
        } else {
            console.log('No hay cambios en las actualizaciones, no se enviaron.');
        }
    } catch (error) {
        console.error('Error al enviar actualizaciones:', error);
    }
});

// Evento messageCreate
client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

    const { author, content, channel, guild } = message;
    const isOwner = author.id === OWNER_ID;
    const isAllowedUser = author.id === ALLOWED_USER_ID;
    const isDM = !guild;
    const isTargetChannel = CHANNEL_ID && channel.id === CHANNEL_ID;

    console.log(`Mensaje recibido - Autor: ${author.id}, Contenido: ${content}, Es DM: ${isDM}`);

    if (!isOwner && !isAllowedUser) return;

    if (isAllowedUser) {
        let userHistory = dataStore.conversationHistory[author.id] || [];
        userHistory.push({ role: 'user', content, timestamp: new Date().toISOString() });
        if (userHistory.length > MAX_MESSAGES) userHistory.shift();
        dataStore.conversationHistory[author.id] = userHistory;
        saveDataStore(dataStore);
    }

    if (isOwner) {
        if (content.startsWith('responder')) {
            const reply = content.slice(9).trim();
            if (!reply) return sendError(channel, 'Escribe algo despu√©s de "responder".');
            try {
                const targetUser = await client.users.fetch(ALLOWED_USER_ID);
                const embeds = [];
                const baseEmbed = createEmbed('#55FF55', '¬°Respuesta de Miguel!', `${reply}\nSi necesitas m√°s, usa !ayuda, Bel√©n.`);
                if (message.attachments.size > 0) {
                    const attachmentText = message.attachments.map((a, i) => `Archivo ${i + 1}: ${a.url}`).join('\n');
                    message.attachments.forEach(a => {
                        if (a.contentType?.startsWith('image/')) {
                            const imageEmbed = new EmbedBuilder(baseEmbed.data).setImage(a.url);
                            embeds.push(imageEmbed);
                        }
                    });
                    if (embeds.length === 0) baseEmbed.addFields({ name: 'Archivos', value: attachmentText });
                }
                embeds.push(baseEmbed);
                const sentMessage = await targetUser.send({ embeds });
                sentMessages.set(sentMessage.id, { content: reply, originalQuestion: 'Mensaje enviado con "responder"', timestamp: new Date().toISOString(), message: sentMessage });
                sendSuccess(channel, '¬°√âxito!', 'Respuesta enviada con √©xito.');
            } catch (error) {
                console.error('Error al enviar respuesta:', error);
                sendError(channel, 'No pude enviar el mensaje.');
            }
            return;
        }
        if (content.startsWith('!update')) {
            const updateText = content.slice(7).trim();
            if (!updateText) return sendError(channel, 'Escribe las actualizaciones despu√©s de "!update".');
            try {
                const targetChannel = await client.channels.fetch(CHANNEL_ID);
                const embed = createEmbed('#FFD700', 'üì¢ Actualizaci√≥n de Miguel IA', updateText);
                await targetChannel.send({ embeds: [embed] });
                sendSuccess(channel, '¬°√âxito!', 'Actualizaci√≥n enviada al canal.');
            } catch (error) {
                console.error('Error al enviar actualizaci√≥n:', error);
                sendError(channel, 'No pude enviar la actualizaci√≥n.');
            }
            return;
        }
    }

    if (!isAllowedUser || (!isTargetChannel && !isDM)) return;

    if (activeTrivia.has(channel.id)) {
        const triviaData = activeTrivia.get(channel.id);
        const opcionesValidas = ['a', 'b', 'c', 'd'];
        if (opcionesValidas.includes(content.toLowerCase())) return;
    }

    if (content.startsWith('!ayuda')) {
        const issue = content.slice(6).trim();
        if (!issue) return sendError(channel, 'Dime qu√© necesitas despu√©s de "!ayuda", Bel√©n.');
        try {
            const owner = await client.users.fetch(OWNER_ID);
            const embeds = [];
            const baseEmbed = createEmbed('#FFD700', '¬°Solicitud de ayuda!', `Bel√©n necesita ayuda con: "${issue}"`);
            if (message.attachments.size > 0) {
                const attachmentText = message.attachments.map((a, i) => `Archivo ${i + 1}: ${a.url}`).join('\n');
                message.attachments.forEach(a => {
                    if (a.contentType?.startsWith('image/')) {
                        const imageEmbed = new EmbedBuilder(baseEmbed.data).setImage(a.url);
                        embeds.push(imageEmbed);
                    }
                });
                if (embeds.length === 0) baseEmbed.addFields({ name: 'Adjuntos', value: attachmentText });
            }
            embeds.push(baseEmbed);
            await owner.send({ embeds });
            const twilio = require('twilio');
            const clientTwilio = new twilio(process.env.TWILIO_SID, process.env.TWILIO_AUTH_TOKEN);
            await clientTwilio.calls.create({
                twiml: `<Response><Say voice="alice">¬°Despierta Miguel! Bel√©n necesita ayuda con ${issue}.</Say></Response>`,
                to: process.env.MY_PHONE_NUMBER,
                from: process.env.TWILIO_PHONE_NUMBER,
            });
            sendSuccess(channel, '¬°Mensaje enviado!', 'Ya avis√© a Miguel y lo estoy llamando, Bel√©n.');
        } catch (error) {
            console.error('Error en !ayuda:', error);
            sendError(channel, 'No pude avisar a Miguel, Bel√©n.');
        }
        return;
    }

    if (content.startsWith('!help')) {
        const embed = createEmbed('#55FF55', '¬°Aqu√≠ tienes mis comandos, Bel√©n!',
            'Estoy listo para ayudarte con:\n' +
            '- **!ayuda <problema>**: Pide ayuda.\n' +
            '- **!help**: Lista de comandos.\n' +
            '- **!trivia**: Juega trivia.\n' +
            '- **!ranking**: Muestra el ranking de trivia.\n' +
            '- **!sugerencias <idea>**: Env√≠a ideas.\n' +
            '- **!chat [mensaje]**: Charla conmigo usando IA.\n' +
            '- **hola**: Saludo especial.'
        );
        await channel.send({ embeds: [embed] });
        return;
    }

    if (content.startsWith('!sugerencias')) {
        const suggestion = content.slice(12).trim();
        if (!suggestion) return sendError(channel, 'Escribe tu sugerencia despu√©s de "!sugerencias", Bel√©n.');
        try {
            const owner = await client.users.fetch(OWNER_ID);
            const embed = createEmbed('#FFD700', 'üí° Nueva sugerencia de Bel√©n', `Sugerencia: "${suggestion}"`);
            await owner.send({ embeds: [embed] });
            sendSuccess(channel, '¬°Sugerencia enviada!', 'Tu idea est√° con Miguel, Bel√©n. ¬°Gracias!');
        } catch (error) {
            console.error('Error en !sugerencias:', error);
            sendError(channel, 'No pude enviar tu sugerencia, Bel√©n.');
        }
        return;
    }

    if (content.startsWith('!trivia')) {
        await manejarTrivia(message);
        return;
    }

    if (content.startsWith('!ranking')) {
        const rankingEmbed = getRankingEmbed();
        await channel.send({ embeds: [rankingEmbed] });
        return;
    }

    if (content.startsWith('!chat')) {
        const chatMessage = content.slice(5).trim();
        if (!chatMessage) return sendError(channel, 'Escribe un mensaje despu√©s de "!chat", por ejemplo: !chat hola, Bel√©n.');

        // Enviar mensaje provisional
        const waitingEmbed = createEmbed('#55FFFF', '¬°Un momento, Bel√©n!', 'Espera, estoy buscando una respuesta...');
        const waitingMessage = await channel.send({ embeds: [waitingEmbed] });

        try {
            const prompt = `Eres Miguel IA, un amigo cercano creado por Miguel para Bel√©n. Responde a "${chatMessage}" de Bel√©n de forma natural y amigable, solo charlando, sin sugerir comandos ni ayuda t√©cnica.`;
            const response = await axios.post(
                'https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1',
                { inputs: prompt, parameters: { max_new_tokens: 500, return_full_text: false, temperature: 0.7 } },
                { headers: { 'Authorization': `Bearer ${process.env.HF_API_TOKEN}`, 'Content-Type': 'application/json' } }
            );
            let aiReply = response.data[0]?.generated_text?.trim() || '¬°Uy, me qued√© en blanco, Bel√©n! ¬øQu√© me cuentas t√∫?';
            dataStore.conversationHistory[author.id].push({ role: 'assistant', content: aiReply, timestamp: new Date().toISOString() });
            saveDataStore(dataStore);
            const finalEmbed = createEmbed('#55FFFF', '¬°Charlando contigo, Bel√©n!', aiReply);
            await waitingMessage.edit({ embeds: [finalEmbed] });
        } catch (error) {
            console.error('Error en !chat:', error);
            const errorEmbed = createEmbed('#FF5555', '¬°Ups, Bel√©n!', 'Algo fall√≥ al buscar la respuesta, pero sigo aqu√≠.');
            await waitingMessage.edit({ embeds: [errorEmbed] });
        }
        return;
    }

    if (content.toLowerCase() === 'hola') {
        sendSuccess(channel, '¬°Hola, qu√© alegr√≠a verte!', `Soy Miguel IA, aqu√≠ para ayudarte, Bel√©n. ¬øQu√© tienes en mente?`);
        return;
    }

    // Si no coincide ning√∫n comando, no responde nada
});

// Evento messageReactionAdd
client.on('messageReactionAdd', async (reaction, user) => {
    if (user.id !== ALLOWED_USER_ID || !sentMessages.has(reaction.message.id)) return;

    const messageData = sentMessages.get(reaction.message.id);
    const owner = await client.users.fetch(OWNER_ID);
    const ecuadorTime = new Date(messageData.timestamp).toLocaleString('es-EC', { timeZone: 'America/Guayaquil', year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true });
    const reactionEmbed = createEmbed('#FFD700', '¬°Reacci√≥n recibida!',
        `Pregunta original: "${messageData.originalQuestion}"\nRespuesta enviada: "${messageData.content}"\nReacci√≥n: ${reaction.emoji}\nEnviado el: ${ecuadorTime}`);

    try {
        await owner.send({ embeds: [reactionEmbed] });
        console.log(`Notificaci√≥n enviada a ${OWNER_ID}: ${reaction.emoji} en mensaje "${messageData.content}"`);
    } catch (error) {
        console.error('Error al notificar reacci√≥n:', error);
    }

    if (reaction.emoji.name === '‚ùå' && messageData.originalQuestion !== 'Mensaje enviado con "responder"') {
        try {
            const alternativePrompt = `Eres Miguel IA, creado por Miguel para Bel√©n. Bel√©n no qued√≥ satisfecha con tu respuesta anterior a "${messageData.originalQuestion}": "${messageData.content}". Proporciona una respuesta alternativa, diferente, clara y √∫til, como un amigo cercano. No repitas la respuesta anterior. Termina con una nota positiva o una sugerencia para seguir charlando.`;
            const response = await axios.post(
                'https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1',
                { inputs: alternativePrompt, parameters: { max_new_tokens: 500, return_full_text: false, temperature: 0.3 } },
                { headers: { 'Authorization': `Bearer ${process.env.HF_API_TOKEN}`, 'Content-Type': 'application/json' } }
            );
            let alternativeReply = response.data[0]?.generated_text?.trim() || 'No se me ocurre algo mejor ahora, pero no me rindo, Bel√©n. ¬øQu√© tal si me das m√°s detalles? ¬°Quiero ayudarte bien!';
            const alternativeEmbed = createEmbed('#55FFFF', '¬°Probemos otra vez, Bel√©n!', alternativeReply, '¬øMejor ahora? Reacciona con ‚úÖ o ‚ùå');
            const newSentMessage = await messageData.message.channel.send({ embeds: [alternativeEmbed] });
            await newSentMessage.react('‚úÖ');
            await newSentMessage.react('‚ùå');
            sentMessages.set(newSentMessage.id, { content: alternativeReply, originalQuestion: messageData.originalQuestion, timestamp: new Date().toISOString(), message: newSentMessage });
        } catch (error) {
            console.error('Error al generar respuesta alternativa:', error);
            sendError(messageData.message.channel, 'No pude encontrar una mejor respuesta ahora, Bel√©n.');
        }
    }
});

client.login(process.env.DISCORD_TOKEN);
